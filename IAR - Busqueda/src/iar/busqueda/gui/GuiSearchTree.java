/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iar.busqueda.gui;

import iar.busqueda.gui.util.*;
import iar.busqueda.logica.City;
import iar.busqueda.logica.GrafoNoDirigido;
import iar.busqueda.logica.TreeSearch;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Rectangle;
import java.io.IOException;
import java.net.URL;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Andres
 */
public class GuiSearchTree extends javax.swing.JFrame {

    private static TreeSearch <City> treeSearch = new TreeSearch(); 
    private Ventana ventana=new Ventana();
    private JFrame dibujoEmergente = new JFrame("Representación gráfica");
    private boolean requireWeight = false;
    private boolean isRootNode = true;
    private static GrafoNoDirigido grafo;
    private Tree tree;  
    
    
//    URL url = this.getClass().getResource("agregar.png");
//    Image img=ImageIO.read(url);
//    URL url1 = this.getClass().getResource("eliminar.png");
//    Image img1=ImageIO.read(url1);
//    URL url2 = this.getClass().getResource("visto.gif");
//    Image img2=ImageIO.read(url2);
//    item1= new JMenuItem("Agregar Hijo",new ImageIcon(img));
//    jPopupMenu1.add(item1);    
//    item1.setHorizontalTextPosition(JMenuItem.RIGHT);    
//    item2= new JMenuItem("Eliminar Nodo",new ImageIcon(img1));    
//    jPopupMenu1.add(item2);    
//    item3= new JMenuItem("Marcar Meta",new ImageIcon(img2));
//    jPopupMenu1.add(item3);
    
    /**
     * Creates new form GuiSearchTree
     */
    public GuiSearchTree() {
        initComponents();
        this.crearIcono();
        this.dibujoEmergente.setVisible(false);
        tree=new Tree();
        tree.addNode("A");
        tree.addNode("B","A");
        tree.addNode("C","A");
        tree.addNode("D","A");
        tree.addNode("E","C");
        tree.addNode("F","C");
        tree.addNode("G","C");
        tree.addNode("H","F");
        tree.addNode("I","F");
        tree.addNode("J","I");
        tree.addNode("K","J");
        tree.addNode("L","J");
        tree.addNode("M","G");
        tree.addNode("N","G");
        tree.addNode("P","M");
        tree.addNode("Q","N");
        tree.addNode("R","Q");
        expandir();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        pnl_estado = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        pnl_opciones = new javax.swing.JPanel();
        btn_insertar = new javax.swing.JButton();
        btn_buscar = new javax.swing.JButton();
        btn_talar = new javax.swing.JButton();
        btn_salir = new javax.swing.JButton();
        combo_metodo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        jToolBar1.setRollover(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arboles de búsqueda");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        pnl_estado.setBorder(javax.swing.BorderFactory.createTitledBorder("Panel de estado"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "m =", "Lista Abierta", "Lista Cerrada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("A");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("B");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("C");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("E");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("F");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("H");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("I");
        javax.swing.tree.DefaultMutableTreeNode treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("J");
        javax.swing.tree.DefaultMutableTreeNode treeNode6 = new javax.swing.tree.DefaultMutableTreeNode("K");
        treeNode5.add(treeNode6);
        treeNode6 = new javax.swing.tree.DefaultMutableTreeNode("L");
        treeNode5.add(treeNode6);
        treeNode4.add(treeNode5);
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("G");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("M");
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("P");
        treeNode4.add(treeNode5);
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("N");
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("Q");
        treeNode4.add(treeNode5);
        treeNode5 = new javax.swing.tree.DefaultMutableTreeNode("R");
        treeNode4.add(treeNode5);
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("D");
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setCellRenderer(null);
        jTree1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout pnl_estadoLayout = new javax.swing.GroupLayout(pnl_estado);
        pnl_estado.setLayout(pnl_estadoLayout);
        pnl_estadoLayout.setHorizontalGroup(
            pnl_estadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_estadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnl_estadoLayout.setVerticalGroup(
            pnl_estadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_estadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_estadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnl_opciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Panel de opciones"));

        btn_insertar.setText("Insertar");
        btn_insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertarActionPerformed(evt);
            }
        });

        btn_buscar.setText("Recorrer");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        btn_talar.setText("Talar hoja");
        btn_talar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_talarActionPerformed(evt);
            }
        });

        btn_salir.setText("Salir");
        btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salirActionPerformed(evt);
            }
        });

        combo_metodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Búsqueda Primero en Anchura", "Búsqueda Primero en Profundidad" }));
        combo_metodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_metodoActionPerformed(evt);
            }
        });

        jButton1.setText("Limpiar tabla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_opcionesLayout = new javax.swing.GroupLayout(pnl_opciones);
        pnl_opciones.setLayout(pnl_opcionesLayout);
        pnl_opcionesLayout.setHorizontalGroup(
            pnl_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_opcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_insertar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_talar)
                .addGap(61, 61, 61)
                .addComponent(combo_metodo, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_salir)
                .addContainerGap())
        );
        pnl_opcionesLayout.setVerticalGroup(
            pnl_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_opcionesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_opcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_insertar)
                    .addComponent(btn_buscar)
                    .addComponent(btn_talar)
                    .addComponent(btn_salir)
                    .addComponent(combo_metodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Andres\\Desktop\\portada.PNG")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pnl_opciones, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnl_estado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_estado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_opciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btn_salirActionPerformed

    private void btn_insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertarActionPerformed
//        this.dibujoEmergente.hide();
//        // Hacer checkeo de que el arbol no exista!
//        int cantNodos = ventana.leerInt("Ingrese cantidad de nodos a ingresar:");
//        grafo = new GrafoNoDirigido(cantNodos);
//        for (int i = 0; i < grafo.length(); i++) { 
//            if (isRootNode) {            
//                //    int cantNodos = ventana.leerInt("Ingrese cantidad de nodos a ingresar:");
//                String nameRoot = ventana.leerCadena("Ingrese nombre del nodo raiz:");
//                grafo.setNodo(nameRoot);
//                isRootNode = false;
//            } else {    
//                String nameHoja = ventana.leerCadena("Ingrese nombre del NUEVO nodo:");
//                grafo.setNodo(nameHoja);
//                String namePadre = ventana.leerCadena("Ingrese nombre del nodo PADRE:");
//                if (requireWeight) {
//                    int weight = ventana.leerInt("Ingrese el peso del nodo:");
//                    grafo.unir(nameHoja, namePadre, weight);
//                } else {
//                    grafo.unir(nameHoja, namePadre);
//                }
//            }
//        }
        //this.renderTree();
//        this.colocarMensajeIntroductorio(grafo.toString());
 
        //tree = new Tree();
        //if(isRootNode){
//            String nameRoot = ventana.leerCadena("Ingrese nombre del nodo raiz:");
//            tree.addNode(nameRoot);
//            agregar(nameRoot);
//            isRootNode = false;
        //} else {
            String nameHoja = ventana.leerCadena("Ingrese nombre del NUEVO nodo:");         
           // String namePadre = ventana.leerCadena("Ingrese nombre del nodo PADRE:");
      
           agregar(nameHoja);
        //}
    }//GEN-LAST:event_btn_insertarActionPerformed

    private void combo_metodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_metodoActionPerformed
//        Object opcion = this.combo_metodo.getSelectedItem();
//        String recorrido=null;
//        if(opcion.equals("Búsqueda Primero en Anchura"))
//            recorrido=this.treeSearch.firstWidth();
//        if(opcion.equals("Búsqueda Primero en Profundidad"))
//            recorrido=this.treeSearch.firstDepth();
//        if(opcion.equals("Búsqueda Primero el Mejor")){
//            this.requireWeight = true;
//            recorrido=this.treeSearch.firstBetter();
//        }
//        if(opcion.equals("Búsqueda A*")){
//            this.requireWeight = true;
//            recorrido=this.treeSearch.aStar();
//        }
//        this.txta_resultados.setText("");
//        this.txta_resultados.setText(recorrido);
    }//GEN-LAST:event_combo_metodoActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        clearTable();
        Object opcion = this.combo_metodo.getSelectedItem();
        //String recorrido=null;
        if(opcion.equals("Búsqueda Primero en Anchura"))
            //recorrido=this.grafo.firstWidth();
            primeroEnAnchura();
        if(opcion.equals("Búsqueda Primero en Profundidad"))
            //recorrido=this.grafo.firstDepth();
            primeroEnProfundidad();
//        if(opcion.equals("Búsqueda Primero el Mejor")){
//            this.requireWeight = true;
//            recorrido=this.grafo.firstBetter();
//        }
//        if(opcion.equals("Búsqueda A*")){
//            this.requireWeight = true;
//            recorrido=this.grafo.aStar();
//        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_talarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_talarActionPerformed
        delete();
    }//GEN-LAST:event_btn_talarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        clearTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        clearTable();
        Object opcion = this.combo_metodo.getSelectedItem();
        String nombre = ventana.leerCadena("Ingrese nombre del nodo a buscar:");  
        if(opcion.equals("Búsqueda Primero en Anchura")){
            this.primeroEnAnchura(nombre);
        }
        if(opcion.equals("Búsqueda Primero en Profundidad")){
            this.primeroEnProfundidad(nombre);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
                                      
    private void clearTable(){
        for(int i=0;i<jTable1.getRowCount();i++){
            jTable1.setValueAt("", i, 0);
            jTable1.setValueAt(null, i, 1);
            jTable1.setValueAt(null, i, 2);
        }
    }
    
    private void primeroEnAnchura(){
           Iterator<iar.busqueda.gui.util.Node> breadthIterator = tree.iterator("A", TraversalStrategy.BREADTH_FIRST);
        int x=0;String hijos="",cadena="";
        while (breadthIterator.hasNext()) {

            Node node = breadthIterator.next();

                jTable1.setValueAt(node.getIdentifier(), x, 0);
            if((x-1)>=0) {
                Object o=jTable1.getValueAt((x - 1), 1);
                jTable1.setValueAt(listaAbierta(node,o.toString()), x, 1);
                cadena+=jTable1.getValueAt(x-1, 0).toString();
                jTable1.setValueAt(cadena+jTable1.getValueAt((x), 0), x, 2);
            }
            else {
                for(int i=0;i<node.getChildren().size();i++){
                    hijos+=node.getChildren().get(i);
                }
                jTable1.setValueAt(hijos, 0, 1);
            }
            hijos="";
            x++;
              if(node.isGoal())
            {
                break;
            }
        }
    }
    
    private void primeroEnAnchura(String nombre){
        Iterator<iar.busqueda.gui.util.Node> breadthIterator = tree.iterator("A", TraversalStrategy.BREADTH_FIRST);
        int x=0;String hijos="",cadena="";
        while (breadthIterator.hasNext()) {
            
            Node node = breadthIterator.next();
            jTable1.setValueAt(node.getIdentifier(), x, 0);
            
            if (node.getIdentifier().compareTo(nombre) == 0) {
                break;
            } else {
            
            if((x-1)>=0) {
                Object o=jTable1.getValueAt((x - 1), 1);
                jTable1.setValueAt(listaAbierta(node,o.toString()), x, 1);
                cadena+=jTable1.getValueAt(x-1, 0).toString();
                jTable1.setValueAt(cadena+jTable1.getValueAt((x), 0), x, 2);
            }
            else {
                for(int i=0;i<node.getChildren().size();i++){
                    hijos+=node.getChildren().get(i);
                }
                jTable1.setValueAt(hijos, 0, 1);
            }
            hijos="";
            x++;
              if(node.isGoal())
            {
                break;
            }
            } 
        }
    }
    
     private void primeroEnProfundidad(){

        Iterator<iar.busqueda.gui.util.Node> breadthIterator = tree.iterator("A", TraversalStrategy.DEPTH_FIRST);
        int x=0;String hijos="",cadena="",cadenaCerrada="";
        while (breadthIterator.hasNext()) {

            Node node = breadthIterator.next();
          
                jTable1.setValueAt(node.getIdentifier(), x, 0);

            if((x-1)>=0) {
               Object o=jTable1.getValueAt((x - 1), 1);
               for(int i=0;i<node.getChildren().size();i++){
                   cadena+=node.getChildren().get(i);
                }
               cadena+=o.toString().substring(1, o.toString().length());
                jTable1.setValueAt(cadena, x, 1);
              cadenaCerrada+=jTable1.getValueAt(x-1, 0).toString();
                jTable1.setValueAt(cadenaCerrada+jTable1.getValueAt((x), 0), x, 2);
               cadena="";
            }
            else {
                for(int i=0;i<node.getChildren().size();i++){
                    hijos+=node.getChildren().get(i);
                }
                jTable1.setValueAt(hijos, 0, 1);
            }
               if(node.isGoal())
            {
                break;
            }
            hijos="";

                x++;
        }    
    }
     
    private void primeroEnProfundidad(String nombre){
        
        Iterator<iar.busqueda.gui.util.Node> breadthIterator = tree.iterator("A", TraversalStrategy.DEPTH_FIRST);
        int x=0;String hijos="",cadena="",cadenaCerrada="";
        while (breadthIterator.hasNext()) {

            Node node = breadthIterator.next();
            jTable1.setValueAt(node.getIdentifier(), x, 0);
          
            if (node.getIdentifier().compareTo(nombre) == 0) {
                break;
            } else {
            

            if((x-1)>=0) {
               Object o=jTable1.getValueAt((x - 1), 1);
               for(int i=0;i<node.getChildren().size();i++){
                   cadena+=node.getChildren().get(i);
                }
               cadena+=o.toString().substring(1, o.toString().length());
                jTable1.setValueAt(cadena, x, 1);
              cadenaCerrada+=jTable1.getValueAt(x-1, 0).toString();
                jTable1.setValueAt(cadenaCerrada+jTable1.getValueAt((x), 0), x, 2);
               cadena="";
            }
            else {
                for(int i=0;i<node.getChildren().size();i++){
                    hijos+=node.getChildren().get(i);
                }
                jTable1.setValueAt(hijos, 0, 1);
            }
               if(node.isGoal())
            {
                break;
            }
            hijos="";

                x++;
        }    
        }
    } 
     
     private String listaAbierta(Node node, String filaAnterior){
       String cadena="";
         for(int i=0;i<node.getChildren().size();i++){
             cadena+=node.getChildren().get(i);
         }
           return filaAnterior.substring(1, filaAnterior.length())+cadena;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiSearchTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiSearchTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiSearchTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiSearchTree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiSearchTree().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_insertar;
    private javax.swing.JButton btn_salir;
    private javax.swing.JButton btn_talar;
    private javax.swing.JComboBox<String> combo_metodo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    private javax.swing.JPanel pnl_estado;
    private javax.swing.JPanel pnl_opciones;
    // End of variables declaration//GEN-END:variables
    private JMenuItem item1,item2,item3;
    
    private void crearIcono() {
        Image mi = null; 
        try {
            mi = ImageIO.read(getClass().getResource("/iar/busqueda/image/iconoArbol.png"));
        } catch (IOException ex) {
            Logger.getLogger(GuiSearchTree.class.getName()).log(Level.SEVERE, null, ex);
        }
        setIconImage(mi);  
    }

//    private void colocarMensajeIntroductorio(String msg) {  
//        this.txta_resultados.setText(msg);
//        this.txta_resultados.setEditable(false);
//    }
//    
//    private void renderTree(){
//        this.pnl_estado.removeAll();
//        Rectangle tamaño = this.iframe_nodos.getBounds();
//        this.iframe_nodos=null;
//        this.iframe_nodos = new JInternalFrame("Representación gráfica", true);
//        this.pnl_estado.add(this.iframe_nodos, JLayeredPane.DEFAULT_LAYER);
//        this.iframe_nodos.setVisible(true);
//        this.iframe_nodos.setBounds(tamaño);
//        this.iframe_nodos.setEnabled(false);                                           
//        this.iframe_nodos.add(this.treeSearch.getRender(), BorderLayout.CENTER);
//        this.dibujoEmergente.getContentPane().add(this.treeSearch.getRender()); 
//    }
    
    private void expandir(){
        for (int i = 0; i < jTree1.getRowCount(); i++) {
         jTree1.expandRow(i);
         }
    }
    private void agregar(String nombre){
       
        if(!nombre.isEmpty()) {
        DefaultMutableTreeNode newchild = new DefaultMutableTreeNode(nombre);

        DefaultMutableTreeNode SelectedNode = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        DefaultTreeModel treemodel=(DefaultTreeModel) jTree1.getModel();
        
        if(SelectedNode!=null) {
            if(tree.getNodes().get(nombre)==null){
                treemodel.insertNodeInto(newchild, SelectedNode, SelectedNode.getChildCount());
                Node n=tree.addNode(nombre, SelectedNode.toString());
            } else {
                JOptionPane.showMessageDialog(this, "No ingrese un nodo existente");
            }
        }
        expandir();
    }
}
    private void delete(){
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        DefaultTreeModel treemodel=(DefaultTreeModel) jTree1.getModel();
         if(selectedNode!=null){
         tree.remove(selectedNode.toString(),selectedNode.getParent().toString());
         treemodel.removeNodeFromParent(selectedNode);
        }
    }
}
